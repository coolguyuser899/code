# pdf to ocr tool
https://hackernoon.com/building-a-gas-pump-scanner-with-opencv-python-ios-116fe6c9ae8b

# installation
brew tap jbarlow83/ocrmypdf
Updating Homebrew...
==> Auto-updated Homebrew!
Updated 3 taps (caskroom/cask, homebrew/core, homebrew/science).
......
==> Tapping jbarlow83/ocrmypdf
Cloning into '/usr/local/Homebrew/Library/Taps/jbarlow83/homebrew-ocrmypdf'...
remote: Counting objects: 10, done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 10 (delta 1), reused 7 (delta 1), pack-reused 0
Unpacking objects: 100% (10/10), done.
Checking connectivity... done.
Tapped 1 formula (37 files, 34.0KB)

brew install ocrmypdf
==> Installing ocrmypdf from jbarlow83/ocrmypdf
.....
/usr/local/Cellar/ocrmypdf/5.5: 1,553 files, 19.8MB, built in 2 minutes 22 seconds

ocrmypdf
usage: ocrmypdf [-h] [-l LANGUAGE] [--image-dpi DPI]
                [--output-type {pdfa,pdf,pdfa-1,pdfa-2}] [--sidecar [FILE]]
                [--version] [-j N] [-q] [-v [VERBOSE]] [--title TITLE]
                [--author AUTHOR] [--subject SUBJECT] [--keywords KEYWORDS]
                [-r] [--remove-background] [-d] [-c] [-i] [--oversample DPI]
                [-f] [-s] [--skip-big MPixels] [--max-image-mpixels MPixels]
                [--tesseract-config CFG] [--tesseract-pagesegmode PSM]
                [--tesseract-oem MODE]
                [--pdf-renderer {auto,tesseract,hocr,tess4,sandwich}]
                [--tesseract-timeout SECONDS]
                [--rotate-pages-threshold CONFIDENCE]
                [--pdfa-image-compression {auto,jpeg,lossless}]
                [--user-words FILE] [--user-patterns FILE] [-k] [-g]
                [--flowchart FLOWCHART]
                input_pdf_or_image output_pdf
ocrmypdf: error: the following arguments are required: input_pdf_or_image, output_pdf


# basic usage to extract text from test.pdf and saved in test.txt
ocrmypdf --sidecar test.txt test.pdf test_output.pdf

# add flags - english, remove background, rotate page
ocrmypdf -l eng --remove-background --rotate-pages  --sidecar test.txt test.pdf test_output.pdf
   INFO -    1: page is facing ⇨, confidence 0.84 - confidence too low to rotate
   INFO - Output file is a PDF/A-2B (as expected)

# output
cat test.txt
Intro and prerequisites

The purpose of this article is to teach you how to set up a Wordpress + MySQL development
environment on your machine. I like local development with Docker, because it gives me a
couple of valuable benefits. Some of these benefits are the following:

0 a well separated development environment on my machine,

0 my production and development environments use the exact same Docker image,

0 I can easily bring up a development container of various Wordpress versions,

0 deployment is a breeze,

0 I don’t need to install all the messy dev tools on my shiny new MacBook Pro (yeah, I’m an
orderly person).

In order to enjoy the above benefits, you need to install the Docker engine on your machine
first. We are lucky, because I just bought a new Mac, so you can see the native Docker for
Mac installation in the video. There is not much to write about it, it’s just a wizard that you
should follow. Just go to https://www.docker.com/products/docker#/mac and follow the

steps in my video.

We’ll use a SQL client during this tutorial, so please make sure that your preferred SQL client
is available on your machine. If you don’t know what to use, check out my favorite for the

Mac; Sequel Pro.
After we sorted out the installation here is what we will do:

pull the MySQL (MariaDB) image from the Docker store
store data outside the container

run the MariaDB container

pull the Wordpress image

run the Wordpress container

.—'<\ico'<fui


