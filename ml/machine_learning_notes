Introduction To Tensorflow from https://www.youtube.com/watch?v=FQ660T4uu7k

real word -> raw data -> data is processed -> clean data -> exploratory data analysys
                                                        | -> exploratory data analysys
                                                        | -> machine learning algorithms statistical models
                                                            |-> communication, visulizations, report findings (make decisions)
                                                            |-> build data product
                                                                |-> back link to real world
                                                                    |-> real world

tensorflow 1.4 works with python3.5, you see runtime not compatible warning when running python 3.6

python3.6 -m pip3 install tensorflow

tensor: a n-dimensional matrix
3 (rank 0)
[1., 2., 3.] (rank 1 - shape[3])
[[1.,2.,3],[4.,5.,6]] (rank 2 - shape[2,3])
tensorboard - graph visualization
https://www.tensorflow.org/install/

import tensorflow as tf

how tensorflow works in examples
http://bcomposes.com/2015/11/26/simple-end-to-end-tensorflow-examples

https://www.tensorflow.org/tutorials/image_recognition   imagenet

http://workpiles.com/2016/06/ccb9-prototype2-recognition_system
japanese sorting cucumbers for different market using raspberry pi
・TensorFlow 0.9.0
・wxPython
・openCV
・pySerial

tensorflow for mobile
tensorflow serving   #serving backend processing, operating, optimizing
tensorflow research cloud  #cloud gpu based
distributed tensorflow  #can connect to remote machine port

####
####tf get started
$ python3
Python 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import tensorflow as tf
>>> node1 = tf.constant(3.0, tf.float32)
>>> node2 = tf.constant(4.0)
>>> print(node1, node2)
Tensor("Const:0", shape=(), dtype=float32) Tensor("Const_1:0", shape=(), dtype=float32)
>>> sess = tf.Session()
>>> print(sess.run([node1, node2]))
[3.0, 4.0]
>>> node3 = tf.add(node1, node2)
>>> print("node3", node3)
node3 Tensor("Add:0", shape=(), dtype=float32)
>>> print("sess.run(node3): ", sess.run(node3))
sess.run(node3):  7.0
>>> print("sess.run(node1 + node2):", sess.run(node1 + node2))
sess.run(node1 + node2): 7.0
>>> a = tf.placeholder(tf.float32)
>>> b = tf.placeholder(tf.float32)
>>> adder_node = a + b
>>> print(sess.run(adder_node, {a:3, b:4.5}))
7.5
>>> print(sess.run(adder_node, {a:[1,3], b:[2,4]}))
[ 3.  7.]
>>> add_and_triple = adder_node * 3
>>> print(sess.run(add_and_triple, {a:3, b:4.5})
... )
22.5

###tf board
>>> import tensorflow as tf
>>> a = tf.constant(5, name="input_a")
>>> b = tf.constant(3, name="input_b")
>>> c = tf.multiply(a, b, name="multiply_c")
>>> d = tf.add(a,b, name="add_d")
>>> e = tf.add(c,d, name="add_e")
>>> sess = tf.Session()
>>> output = sess.run(e)
>>> writer = tf.train.SummaryWriter('./my_graph', sess.graph)  ##tf 1.2 changed to tf.summary.FileWriter
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'tensorflow.python.training.training' has no attribute 'SummaryWriter'
>>> writer = tf.summary.FileWriter('./my_graph', sess.graph)
>>> writer.close()
>>> sess.close()
>>>

####tf board to see graph
tensorboard --logdir=my_graph/
Starting TensorBoard b'47' at http://0.0.0.0:6006


## linear model can be used for predictive purpose, classifier
#Weight = tf.Variable([.3], tf.float32)
#bias = tf.Variable([-.3], tf.float32)
#x = tf.placeholder(tf.float32)
#linear_model = W * x + b


>>> W = tf.Variable([.3], tf.float32)
>>> b = tf.Variable([-.3], tf.float32)
>>> x = tf.placeholder(tf.float32)
>>> linear_model = W * x + b
>>> init = tf.global_variables_initializer()
>>> sess = tf.Session()
>>> sess.run(init)
>>> print(sess.run(linear_model, {x:[1,2,3,4]}))
[ 0.          0.30000001  0.60000002  0.90000004]

>>> y = tf.placeholder(tf.float32)
>>> squared_deltas = tf.square(linear_model - y)
>>> loss = tf.reduce_sum(squared_deltas)
>>> print(sess.run(loss, {x:[1,2,3,4], y:[0,-1,-2,-3]}))   #show result not optimal
23.66

>>> fixW = tf.assign(W, [-1.])
>>> fixb = tf.assign(b, [1.])
>>> sess.run([fixW, fixb])
[array([-1.], dtype=float32), array([ 1.], dtype=float32)]
>>> print(sess.run(loss, {x:[1,2,3,4], y:[0,-1,-2,-3]}))
0.0      #show best result

>>> optimizer = tf.train.GradientDescentOptimizer(0.01)   #use train gradient to find closest values, -0.99, 0.99
>>> train = optimizer(minimize(loss)
>>> train = optimizer.minimize(loss)
>>> sess.run(init)
>>> for i in range(1000):        #to run 1000 times
...     sess.run(train, {x:[1,2,3,4], y:[0,-1,-2,-3]})
...
>>> print(sess.run([W,b]))
[array([-0.9999969], dtype=float32), array([ 0.99999082], dtype=float32)]

##image recognition imagenet
#https://tensorflow.org/tutorials/imgage_recognition, inception v3 model
mkdir tf_imagenet
git clone https://github.com/tensorflow/models.git tensorflow-models
cd ./tutorials/image/imagenet/classify_image.py
python3.6 classify_image.py

/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: compiletime version 3.5 of module 'tensorflow.python.framework.fast_tensor_util' does not match runtime version 3.6
  return f(*args, **kwds)
>> Downloading inception-2015-12-05.tgz 100.0%
Successfully downloaded inception-2015-12-05.tgz 88931400 bytes.
2018-01-01 12:54:01.883305: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2018-01-01 12:54:03.584564: W tensorflow/core/framework/op_def_util.cc:334] Op BatchNormWithGlobalNormalization is deprecated. It will cease to work in GraphDef version 9. Use tf.nn.batch_normalization().
giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca (score = 0.89107)      ##########testing image high score
indri, indris, Indri indri, Indri brevicaudatus (score = 0.00779)
lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens (score = 0.00296)
custard apple (score = 0.00147)
earthstar (score = 0.00117)

#### images downloaded
/tmp/imagenet/
total 362176
-rw-rw-r--  1 Marshmallows  wheel     11416  4 Dec  2015 LICENSE
-rw-rw-r--  1 Marshmallows  wheel  95673916  5 Dec  2015 classify_image_graph_def.pb
-rw-rw-r--  1 Marshmallows  wheel      2683  1 Dec  2015 cropped_panda.jpg
-rw-rw-r--  1 Marshmallows  wheel     64986 18 Nov  2015 imagenet_2012_challenge_label_map_proto.pbtxt
-rw-rw-r--  1 Marshmallows  wheel    741401 18 Nov  2015 imagenet_synset_to_human_label_map.txt
-rw-r--r--  1 Marshmallows  wheel  88931400  1 Jan 12:53 inception-2015-12-05.tgz


python3.6 classify_image.py --image_file flamingo.png
flamingo (score = 0.73916)
goose (score = 0.04539)
pelican (score = 0.01839)
black swan, Cygnus atratus (score = 0.00962)
black stork, Ciconia nigra (score = 0.00559)

python3.6 classify_image.py --image_file pug.png
Brabancon griffon (score = 0.59837)
pug, pug-dog (score = 0.35555)
French bulldog (score = 0.00599)
affenpinscher, monkey pinscher, monkey dog (score = 0.00125)
Pekinese, Pekingese, Peke (score = 0.00102)

python3.6 classify_image.py --image_file terrier.png
Norwich terrier (score = 0.83114)
Norfolk terrier (score = 0.11521)
West Highland white terrier (score = 0.00758)
Scotch terrier, Scottish terrier, Scottie (score = 0.00368)
Australian terrier (score = 0.00278)


####
distributed tensorflow  #can connect to remote machine port

import tensorflow as tf
c = tf.constant("Hello, distributed tf")
sess = tf.Session("grpc://localhost:2222")
sess.run(c)
#Specifi code runs on a GPU
with tf.device('/gpu:0')
#with tf.device("job:worker/task:7")
    ...
    train_op = ...
#Now, launch the job on 'worker7' node
with tf.Session("grpc://worker7:2222") as sess:
    for _ in range(10000):
        sess.run(train_op)

####
##tf end to end dataset examples
##https://github.com/jasonbaldridge/try-tf

#python packages
python3.6 -m pip install sklearn
python3.6 -m pip install scipy
python3.6 -m pip install matplotlib

#install r for dataset generation
brew tap homebrew/science
brew install r

Rscript --version
R scripting front-end version 3.4.3 (2017-11-30)

#linear data, generate sample data
cd try-tf/simdata
Rscript --version
R scripting front-end version 3.4.3 (2017-11-30)

#create 2 dimension sample data
Rscript generate_linear_data.R    #Rplots.pdf created for plot graph

#moon data generate_moon_data.py
python3.6 -m pip install sklearn
python3.6 -m pip install scipy


python3.6 generate_moon_data.py > moon.txt
cat moon.txt > moon_data_train.csv
Rscript plot_data.R   #create a graph

#saturn data
Rscript generate_saturn_data.R  #change sigma value to see difference
Rscript plot_data.R

#see hyper plane graph
$ R
source('plot_hyperplane.R')
quit()

####linear data and graph
python3.6 softmax.py --train simdata/linear_data_train.csv --test simdata/linear_data_eval.csv --num_epochs 1 --verbose True

##moon data run twice
python3.6 softmax.py --train simdata/moon_data_train.csv --test simdata/moon_data_eval.csv --num_epochs 10
Accuracy: 0.858

python3.6 hidden.py --train simdata/moon_data_train.csv --test simdata/moon_data_eval.csv --num_epochs 100 --num_hidden 5
Accuracy: 0.968

##saturn data
python3.6 softmax.py --train simdata/saturn_data_train.csv --test simdata/saturn_data_eval.csv --num_epochs 100
Accuracy: 0.46

python3.6 hidden.py --train simdata/saturn_data_train.csv --test simdata/saturn_data_eval.csv --num_epochs 100 --num_hidden 15
Accuracy: 1.0

##create log for tensorboard
$ python3.6 annotated_softmax.py --train simdata/linear_data_train.csv --test simdata/linear_data_eval.csv --num_epochs 5 --verbose False
Accuracy: 0.995

$ tensorboard --logdir=try_tf_logs/
Starting TensorBoard b'47' at http://0.0.0.0:6006

